#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.6.0
# from Racc grammar file "".
#

require 'racc/parser.rb'

require "strscan"
require "poly_ruby/monomial"

class PolynomialMParser < Racc::Parser

module_eval(<<'...end poly_m_parser.y/module_eval...', 'poly_m_parser.y', 54)
def parse(str)
  @yydebug = true
  @tokens = []

  s = StringScanner.new(str)

  until s.eos?
    case
    when s.scan(/\s+/)
    when s.scan(/\+/)
      @tokens.push ['+', s.matched]
    when s.scan(/\-/)
      @tokens.push ['-', s.matched]
    when s.scan(/\*\*|\^/)
      @tokens.push [:POW, s.matched]
    when s.scan(/\*/)
      @tokens.push ['*', s.matched]
    when s.scan(/\//)
      @tokens.push ['/', s.matched]
    when s.scan(/\(/)
      @tokens.push ['(', s.matched]
    when s.scan(/\)/)
      @tokens.push [')', s.matched]
    when s.scan(/\d+/)
      @tokens.push [:DIGITS, s.matched]
    when s.scan(/[a-zA-Z]+/)
      @tokens.push [:LETTERS, s.matched]
    when s.scan(/.|\n/o)
      @tokens.push [s.matched, s.matched]
    else
      raise "scanner error"
    end
  end
  @tokens.push [false, '$end']
  #p @tokens

  do_parse
end

def next_token
  @tokens.shift
end

...end poly_m_parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    17,    18,    36,    37,    36,    37,    22,    19,     5,    19,
     3,    19,    23,     8,     9,     5,     8,    16,    13,    14,
     8,     9,     5,    22,    16,     8,     9,     8,     9,     5,
    38,    16,     8,     9,     8,     9,     5,    19,    16,    13,
    14,     8,     9,     5,    19,    16,    13,    14,     8,     9,
     5,     8,    16,     8,     9,     8,     9,     5,   nil,    16,
   nil,    10,     8,     9,    11,    12,    13,    14,    30,   nil,
    28,     8,     9,    32,    13,    14,     8,     9,    39,    13,
    14,    13,    14,    43,   nil,    44,     8,     9 ]

racc_action_check = [
     4,     4,    26,    26,    27,    27,     8,     4,     0,    26,
     0,    27,    10,     0,     0,     3,    19,     3,     2,     2,
     3,     3,     5,    22,     5,    13,    13,     5,     5,    11,
    28,    11,    14,    14,    11,    11,    12,    31,    12,    24,
    24,    12,    12,    16,    33,    16,    25,    25,    16,    16,
    30,    38,    30,    36,    36,    30,    30,    32,   nil,    32,
   nil,     1,    32,    32,     1,     1,    15,    15,    17,   nil,
    15,    17,    17,    18,    29,    29,    18,    18,    29,    40,
    40,    41,    41,    40,   nil,    41,    37,    37 ]

racc_action_pointer = [
     2,    61,    13,     9,    -3,    16,   nil,   nil,    -5,   nil,
    12,    23,    30,    14,    21,    61,    37,    60,    65,     5,
   nil,   nil,    12,   nil,    34,    41,    -1,     1,    20,    69,
    44,    27,    51,    34,   nil,   nil,    42,    75,    40,   nil,
    74,    76,   nil,   nil,   nil ]

racc_action_default = [
   -21,   -21,    -1,   -21,    -5,   -21,   -12,   -13,   -17,   -20,
   -21,   -21,   -21,   -21,   -21,   -21,   -21,   -21,   -21,   -21,
    -9,   -18,   -21,    45,    -3,    -4,   -10,   -11,    -6,   -21,
   -21,   -14,   -21,   -15,   -16,   -19,   -21,   -21,   -21,    -6,
   -21,   -21,    -2,    -7,    -8 ]

racc_goto_table = [
     2,    34,     1,    15,   nil,    20,   nil,    21,   nil,   nil,
   nil,    24,    25,    26,    27,   nil,    29,    31,    33,   nil,
    42,    35,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    40,   nil,    41,   nil,   nil,   nil,    31,    33 ]

racc_goto_check = [
     2,     3,     1,     2,   nil,     2,   nil,     6,   nil,   nil,
   nil,     2,     2,     4,     4,   nil,     2,     4,     4,   nil,
     3,     6,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     2,   nil,     2,   nil,   nil,   nil,     4,     4 ]

racc_goto_pointer = [
   nil,     2,     0,   -18,     0,   nil,    -1 ]

racc_goto_default = [
   nil,   nil,   nil,     6,     4,     7,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 14, :_reduce_1,
  5, 14, :_reduce_2,
  3, 14, :_reduce_3,
  3, 14, :_reduce_4,
  1, 15, :_reduce_5,
  3, 15, :_reduce_6,
  5, 15, :_reduce_7,
  5, 15, :_reduce_8,
  2, 15, :_reduce_9,
  3, 15, :_reduce_10,
  3, 15, :_reduce_11,
  1, 17, :_reduce_12,
  1, 17, :_reduce_13,
  3, 17, :_reduce_14,
  3, 17, :_reduce_15,
  3, 17, :_reduce_16,
  1, 16, :_reduce_17,
  2, 16, :_reduce_none,
  2, 19, :_reduce_none,
  1, 18, :_reduce_none ]

racc_reduce_n = 21

racc_shift_n = 45

racc_token_table = {
  false => 0,
  :error => 1,
  :UMINUS => 2,
  "*" => 3,
  "/" => 4,
  "+" => 5,
  "-" => 6,
  "=" => 7,
  "(" => 8,
  ")" => 9,
  :POW => 10,
  :DIGITS => 11,
  :LETTERS => 12 }

racc_nt_base = 13

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "UMINUS",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "\"=\"",
  "\"(\"",
  "\")\"",
  "POW",
  "DIGITS",
  "LETTERS",
  "$start",
  "polynomial",
  "monomials",
  "number",
  "monomial",
  "variable",
  "number_loop" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'poly_m_parser.y', 14)
  def _reduce_1(val, _values, result)
     result = PolyM.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'poly_m_parser.y', 15)
  def _reduce_2(val, _values, result)
     result = PolyM.new(val[1]) ** val[4].to_i
    result
  end
.,.,

module_eval(<<'.,.,', 'poly_m_parser.y', 16)
  def _reduce_3(val, _values, result)
     result = val[0] * PolyM.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'poly_m_parser.y', 17)
  def _reduce_4(val, _values, result)
     result = val[0] / PolyM.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'poly_m_parser.y', 20)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'poly_m_parser.y', 21)
  def _reduce_6(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'poly_m_parser.y', 22)
  def _reduce_7(val, _values, result)
     result = val[3].map{|m| m * val[0]}
    result
  end
.,.,

module_eval(<<'.,.,', 'poly_m_parser.y', 23)
  def _reduce_8(val, _values, result)
     result = val[3].map{|m| val[0] / m}
    result
  end
.,.,

module_eval(<<'.,.,', 'poly_m_parser.y', 24)
  def _reduce_9(val, _values, result)
     result = val[1].map(&:negate!)
    result
  end
.,.,

module_eval(<<'.,.,', 'poly_m_parser.y', 25)
  def _reduce_10(val, _values, result)
     result = val[0].append(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'poly_m_parser.y', 26)
  def _reduce_11(val, _values, result)
     result = val[0].append(val[2].negate!)
    result
  end
.,.,

module_eval(<<'.,.,', 'poly_m_parser.y', 29)
  def _reduce_12(val, _values, result)
     result = Monomial(c=val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'poly_m_parser.y', 30)
  def _reduce_13(val, _values, result)
     result = Monomial(c=1, p={"#{val[0]}"=>1})
    result
  end
.,.,

module_eval(<<'.,.,', 'poly_m_parser.y', 31)
  def _reduce_14(val, _values, result)
     result = val[0] * val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'poly_m_parser.y', 32)
  def _reduce_15(val, _values, result)
     result = val[0] / val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'poly_m_parser.y', 33)
  def _reduce_16(val, _values, result)
     result = val[0].clone ** val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'poly_m_parser.y', 37)
  def _reduce_17(val, _values, result)
     result = val[0].to_i
    result
  end
.,.,

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

def _reduce_none(val, _values, result)
  val[0]
end

end   # class PolynomialMParser

PolyMParser = PolynomialMParser
